#!/usr/bin/env python
import os, array, sys
import pagemap
import random
import copy

kpcount = pagemap.kpagecount("")
amap = pagemap.archmap("")
krange = kpcount.counts(amap.pfn_offset(), kpcount.pages())

def measure(pid):
    vss, rss, uss, pss = 0, 0, 0, 0
    pmap = pagemap.processmap(pid)

    for m in pmap.maps():
        vss += m.end - m.start
        r = pmap.range(m.start, m.end)
        for idx in range(len(r)):
            pfn = r[idx] & ((1 << 55) - 1)
            if pfn == 0:
                continue
            rss += 4096
            # skip framebuffer mappings
            if pfn <= kpcount.pages():
                c = krange[int(pfn) - amap.pfn_offset()]
            else:
                c = 0
            if c == 1:
                uss += 4096
            if c:
                pss += int(4096.0 / c)

    return vss, rss, pss, uss



def get_USS(pid):
    vss, rss, pss, uss = measure(int(pid))
    return uss/1024

def kill_process(pstr, mem, mode):
    mem_request = mem
    pids = []
    #mem_list = {}
    for lines in os.popen("ps ax | grep " + pstr + " | grep -v grep"):
        line = lines.split()
        pid = line[0]
        pids.append(pid)
       #os.kill(int(pid), signal.SIGKILL)
    print (pids)

    mem_total, mem_list = check_total_mem(pids)

    #sort pids based on uss(increasing order)
    #sorted_dict = {}

    #print(type(mem_list))

    print("total mem ", mem_total)



    if(mem_total >= int(mem)):
        #print("hello")
        if(mode == 'random'):
            random_kill(pids, mem)
        else:
            mem_list = copy.deepcopy(sorted(mem_list.items(), key=lambda x: x[1]))
            print("Sorted list ", mem_list)
            memory_aware_kill(mem_list, mem)

    else:
        print("Enough memory not available")
    # i = 0
    # while i < len(pids):
    #     uss = get_USS(pids[i])
    #     if(uss >= mem_request):
    #         mem_list.update({pids[i]: uss})
    #     i = i+1
    #
    # if(len(mem_list) > 0 ):
    #     print("Processes:")
    #     print(mem_list)
    # else:
    #     print("No process found")



def check_total_mem(pids):
    i = 0
    mem_total = 0
    mem_list = {}

    while i < len(pids):
        uss = get_USS(pids[i])
        mem_total = mem_total + int(uss)
        mem_list.update({pids[i]: int(uss)})
        i = i + 1

    return mem_total, mem_list


def random_kill(pids, mem):
    print("Mode: Random Kill")
    i =0
    #mem = 0
    #total_mem = 0
    freed_mem = 0
    total_proc = 0
    #check if total mem in pids is >= mem
    while len(pids) > 0 and int(mem) > 0:
        index = random.randint(0, len(pids) - 1)
        uss = get_USS(pids[index])
        #total_mem = total_mem + uss
        print("index", index)
        #print("uss is", uss)
        mem = mem - uss
        #print("current mem",mem)
        print("killing ", pids[index])
        freed_mem +=uss
        total_proc +=1
        #os.kill(int(pids[index]), signal.SIGKILL)

        pids.pop(index)
        #mem = mem -1
        #kill process
        #keep killing from the list]

    print("Total memory freed: ", freed_mem)
    print("Total processes killed: ", total_proc)

def memory_aware_kill(mem_list, mem):

    print("Mode: Memory-aware Kill")


    #kill process with uss>=mem => this will kill only one process
    flag = 0
    freed_mem = 0
    total_proc = 0
    i = 0
    while i < len(mem_list):
        if(mem_list[i][1]>= mem):
            flag = 1
            freed_mem +=mem_list[i][1]
            total_proc +=1
            print("Killing ", mem_list[i][0])
            break

        i += 1
            #os.kill(int(pid), signal.SIGKILL)

    #print("pid and uss are: ", pid, uss)
    #kill the least number of processes
    #print('value of i', i)
    #print('length', len(mem_list))
    if(not flag):
        while mem > 0:
            # kill the process with max memory,i.e the last from the list
            mem = mem - mem_list[i - 1][1]
            freed_mem += mem_list[i - 1][1]
            total_proc += 1
            print("Killing ", mem_list[i-1][0])
            mem_list.pop(i - 1)
            #print(mem_list)
             
            i = 0

            while i < len(mem_list):
                if (mem_list[i][1] >= mem):
                    #print('length', len(mem_list))
                    flag = 1
                    mem = mem - mem_list[i][1]
                    freed_mem += mem_list[i][1]
                    total_proc += 1
                    print("Killing ", mem_list[i][0])
                    mem_list.pop(i)
                    break
                i+=1

         
    print("Total memory freed: ", freed_mem)
    print("Total processes killed: ", total_proc)



if __name__ == '__main__':
    kill_process('anjali', int(sys.argv[1]), sys.argv[2])


#
# for pid in sys.argv[1:]:
#     vss, rss, pss, uss = measure(int(pid))
#     print "%8d: VSS % 7dk RSS % 7dk PSS % 7dk USS % 7dk" % (
#         int(pid),
#         vss / 1024,
#         rss / 1024,
#         pss / 1024,
#         uss / 1024)
